[(7,""),(3,"*3"),(1,"+2*3")]
test/algeff/parser.kk(64, 7): warning: input shadows an earlier local definition or parameter
.Op-fail : forall<a> .op-fail
.Op-flip : .op-flip
.Op-satisfy : forall<a> (pred : (string) -> maybe<(a, string)>) -> .op-satisfy
.Ops-fail : (fail : .op-fail) -> .ops-many
.Ops-flip : (flip : .op-flip) -> .ops-many
.Ops-satisfy: (satisfy : .op-satisfy) -> .ops-parse
.tag-many : string
.tag-op-fail: string
.tag-op-flip: string
.tag-op-satisfy: string
.tag-parse : string
alpha : () -> parse int
char : (p : (char) -> bool) -> parse char
choice : forall<a,e> (p1 : () -> <many|e> a, p2 : () -> <many|e> a) -> <many|e> a
digit : () -> parse int
eager : forall<a,e> (action : () -> <many|e> a) -> e list<a>
eparse : forall<a,e> (p : () -> <many,parse|e> a, input : string) -> e list<(a, string)>
expr : () -> <many,parse,div> int
factor : () -> <many,parse,div> int
fail : forall<a> () -> many a
flip : () -> many bool
main : () -> <div,console> ()
many : forall<a,e> (p : () -> <many,div|e> a) -> <many,div|e> list<a>
many1 : forall<a,e> (p : () -> <many,div|e> a) -> <many,div|e> list<a>
mparse : forall<a,e> (p : () -> <many,parse|e> a, input : string) -> e list<(a, string)>
number : () -> <many,parse,div> int
parse : forall<a,e> (string, () -> <parse,many|e> a) -> <many|e> (a, string)
satisfy : forall<a> (pred : (string) -> maybe<(a, string)>) -> parse a
select : forall<a> (list<a>) -> many a
show-parse : forall<a> (xs : list<(a, string)>, f : (a) -> string) -> string
show-parse-int: (xs : list<(int, string)>) -> string
show-parse-ints: (xs : list<(list<int>, string)>) -> string
solutions : forall<a,e> (action : () -> <many|e> a) -> e list<a>
symbol : (c : char) -> parse ()
term : () -> <many,parse,div> int
test1 : () -> <div,console> ()