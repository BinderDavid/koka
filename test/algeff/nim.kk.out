-----------
alice
-----------
bob
-----------
alice[
 1 -> bob[
 1 -> alice[
 1 -> alice wins],
 2 -> bob wins],
 2 -> bob[
 1 -> bob wins],
 3 -> alice wins]
-----------
alice
-----------
bob
-----------
[bob,alice]
-----------
failure while running program:
 node out/test/algeff_nim.js
test/algeff/nim.kk(61, 3): warning: pattern variable p 
 is unused (or a wrongly spelled constructor?)
 hint: prepend an underscore to make it a wildcard pattern
.Op-cheat : (player : player) -> .op-cheat
.Op-choose : .op-choose
.Op-get : forall<a> .op-get<a>
.Op-move : (player : player, sticks : int) -> .op-move
.Op-put : forall<a> (x : a) -> .op-put<a>
.Ops-cheat : (cheat : .op-cheat) -> .ops-cheating
.Ops-choose : (choose : .op-choose) -> .ops-choose
.Ops-get : forall<a> (get : .op-get<a>) -> .ops-state<a>
.Ops-move : (move : .op-move) -> .ops-nim
.Ops-put : forall<a> (put : .op-put<a>) -> .ops-state<a>
.tag-cheating: string
.tag-choose : string
.tag-nim : string
.tag-op-cheat: string
.tag-op-choose: string
.tag-op-get : string
.tag-op-move: string
.tag-op-put : string
.tag-state : string
== : (p1 : player, p2 : player) -> bool
Alice : player
Bob : player
Take : (player : player, moves : list<(int, gtree)>) -> gtree
Winner : (player : player) -> gtree
alice? : (player : player) -> bool
aliceTurn : (n : int) -> <nim,div> player
allResults : forall<a,e> (action : () -> <choose|e> a) -> e list<a>
bob? : (player : player) -> bool
bobChooses : forall<a,e> (m : () -> <nim,choose|e> a) -> <choose|e> a
bobTurn : (n : int) -> <nim,div> player
cheat : (player : player) -> cheating ()
cheatReport : forall<a,e> (action : () -> <cheating,exn|e> a) -> <exn|e> a
check : forall<a,e> (action : () -> <nim,cheating,exn|e> a) -> <nim,cheating,exn|e> a
choose : () -> choose bool
coin : forall<a,e> (action : () -> <choose,ndet|e> a) -> <ndet|e> a
game : (n : int) -> <nim,div> player
gametree : forall<e> (action : () -> <nim|e> player) -> e gtree
get : forall<a> () -> (state<a>) a
main : () -> <pure,console> ()
move : (player : player, sticks : int) -> nim int
mymap : forall<a,b,e> (list<a>, (a) -> e b) -> e list<b>
pc : forall<a,e> (action : () -> <nim|e> a) -> e a
perfect : forall<a,e> (action : () -> <nim|e> a) -> e a
player : (gtree : gtree) -> player
printBoard : (gs : gstate) -> io ()
printer : forall<a,e> (action : () -> <io,state<gstate>|e> a) -> <io,state<gstate>|e> a
put : forall<a> (x : a) -> (state<a>) ()
replay : forall<a,e> (n : int, action : () -> <div|e> a) -> <div|e> a
s0 : list<(player, int)>
scoreUpdater: forall<e> (action : () -> <state<gstate>|e> player) -> <state<gstate>|e> player
show : (gt : gtree) -> div string
show : (ps : list<player>) -> string
show : (p : player) -> string
showGt : (gt : gtree, indent : int) -> div string
state : forall<a,b,e> (s : a, action : () -> <state<a>|e> b) -> e b
take? : (gtree : gtree) -> bool
testCheck : () -> pure player
testChoose : () -> div list<player>
testCoin : () -> <div,ndet> player
testGt : () -> div gtree
testPc1 : () -> pure player
testPc2 : () -> pure player
testPerfect1: () -> div player
testPerfect2: () -> div player
testPrint1 : () -> io player
testPrint2 : () -> io player
updateScore : (p : player, gs : gstate) -> gstate
validMoves : (n : int) -> list<int>
winner? : (gtree : gtree) -> bool
.../out/test/std_core.js:
 throw exn; // rethrow
 ^
std/core/Error: bob cheated!