2
ticks: 2
2
((16/2)/3)
(16/2)
16
2
3
ticks: 2
2
.Op-failure : forall<a> (s : string) -> .op-failure
.Op-line : (e : expr) -> .op-line
.Op-tick : .op-tick
.Ops-failure: (failure : .op-failure) -> .ops-exc
.Ops-line : (line : .op-line) -> .ops-out
.Ops-tick : (tick : .op-tick) -> .ops-state
.tag-exc : string
.tag-op-failure: string
.tag-op-line: string
.tag-op-tick: string
.tag-out : string
.tag-state : string
>>= : forall<a,b> (m : stexn<a>, f : (a) -> stexn<b>) -> stexn<b>
Div : (e1 : expr, e2 : expr) -> expr
Int : (i : int) -> expr
div? : (expr : expr) -> bool
eval : (e : expr) -> stexn<int>
eval0 : (e : expr) -> int
eval1 : (e : expr) -> exc int
eval2 : (e : expr) -> <exc,state> int
eval3 : (e : expr) -> <exc,out,state> int
exc : forall<a,e> (action : () -> <exc|e> a) -> e either<string,a>
expr1 : expr
expr2 : expr
exprX : expr
failure : forall<a> (s : string) -> exc a
int? : (expr : expr) -> bool
line : (e : expr) -> out ()
main : () -> console ()
mfail : forall<a,b,c,e> (err : a) -> ((s : b) -> e either<a,c>)
mtick : forall<a,e> () -> ((s : int) -> e either<a,((), int)>)
out : forall<a,e> (action : () -> <out,console|e> a) -> <console|e> a
run : forall<a,b,e> (s : a, m : (a) -> e b) -> e b
show : (r : either<string,(int, int)>) -> total string
show : (e : expr) -> total string
show1 : (x : either<string,int>) -> string
show2 : (x : (either<string,int>, int)) -> string
showErr : forall<a> (s : (a) -> string, x : either<string,a>) -> string
state : forall<a,e> (i : int, action : () -> <state|e> a) -> e (a, int)
test1 : (e : expr) -> console ()
test2 : (e : expr) -> console ()
test3 : (e : expr) -> console ()
tick : () -> state ()
unit : forall<a> (x : a) -> stexn<a>